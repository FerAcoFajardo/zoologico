/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import exceptions.DAOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import objetonegocio.Clima;
import objetonegocio.Continente;
import objetonegocio.Habitat;
import objetonegocio.Vegetacion;
import reglas_negocio.FabricaNegocios;
import reglas_negocio.iNegocios;

/**
 *
 * @author fernando
 */
public class FrmPantallaRegistrarHabitat extends javax.swing.JDialog {

    private static FrmPantallaRegistrarHabitat instancia;
    private static Habitat habitat;
    private iNegocios iNegocios = FabricaNegocios.crearNegocios();
    private DefaultListModel mdlDisponibles;
    private DefaultListModel mdlSeleccionados = new DefaultListModel();

    /**
     * Creates new form FrmPantallaRegistrarHabitat
     */
    private FrmPantallaRegistrarHabitat(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
    }

    public static FrmPantallaRegistrarHabitat getInstance(java.awt.Frame parent) {
        if (instancia == null) {
            instancia = new FrmPantallaRegistrarHabitat(parent, true);
            habitat = new Habitat();
        }
        return instancia;
    }

    public void despliegaInformacion(List<List> datos) throws Exception {
        if (datos.isEmpty()) {
            throw new Exception("La lista de datos esta vacia");
        }

        for (int i = 0; i < datos.size(); i++) {
            if (datos.get(i).get(0).getClass() == Vegetacion.class) {
                datos.get(i).forEach(vegetacion -> {
                    this.cmbVegetacion.addItem((Vegetacion) vegetacion);
                });
            }
            if (datos.get(i).get(0).getClass() == Clima.class) {
                for (Object item : (((List) datos.get(i)))) {
                    this.cmbClima.addItem((Clima) item);
                }
                datos.get(i).forEach(clima -> {
                    this.cmbClima.addItem((Clima) clima);
                });
            }
            if (datos.get(i).get(0).getClass() == Continente.class) {
                mdlDisponibles = new DefaultListModel();
                datos.get(i).forEach(continente -> {
                    mdlDisponibles.addElement(continente);
                });

                listContinentesDisponibles.setModel(mdlDisponibles);
            }
        }
        this.setVisible(true);
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNombreHabitat = new javax.swing.JLabel();
        txtNombreHabitat = new javax.swing.JTextField();
        btnVerificar = new javax.swing.JButton();
        cmbVegetacion = new javax.swing.JComboBox<>();
        cmbClima = new javax.swing.JComboBox<>();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        lblVegetacion = new javax.swing.JLabel();
        lblClima = new javax.swing.JLabel();
        pnlContinentes = new javax.swing.JPanel();
        scrlSeleccionados = new javax.swing.JScrollPane();
        listContinentesSeleccionados = new javax.swing.JList<>();
        scrlDisponibles = new javax.swing.JScrollPane();
        listContinentesDisponibles = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setForeground(java.awt.Color.red);
        setResizable(false);

        lblNombreHabitat.setText("Nombre Habitat");
        lblNombreHabitat.setToolTipText("");

        btnVerificar.setText("Verificar");
        btnVerificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clkBotonVerificarExistencia(evt);
            }
        });

        cmbVegetacion.setEnabled(false);

        cmbClima.setEnabled(false);

        btnGuardar.setText("Guardar");
        btnGuardar.setEnabled(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clkBotonGuardarHabitat(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        lblVegetacion.setText("Tipo vegetaci√≥n");

        lblClima.setText("Clima");

        pnlContinentes.setBorder(javax.swing.BorderFactory.createTitledBorder("Continentes"));

        listContinentesSeleccionados.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionados"));
        listContinentesSeleccionados.setEnabled(false);
        listContinentesSeleccionados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clkBotonEliminarContinente(evt);
            }
        });
        scrlSeleccionados.setViewportView(listContinentesSeleccionados);

        listContinentesDisponibles.setBorder(javax.swing.BorderFactory.createTitledBorder("Disponibles"));
        listContinentesDisponibles.setEnabled(false);
        listContinentesDisponibles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clkBotonAgregarContinente(evt);
            }
        });
        scrlDisponibles.setViewportView(listContinentesDisponibles);

        javax.swing.GroupLayout pnlContinentesLayout = new javax.swing.GroupLayout(pnlContinentes);
        pnlContinentes.setLayout(pnlContinentesLayout);
        pnlContinentesLayout.setHorizontalGroup(
            pnlContinentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContinentesLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(scrlSeleccionados, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(scrlDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlContinentesLayout.setVerticalGroup(
            pnlContinentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContinentesLayout.createSequentialGroup()
                .addGroup(pnlContinentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlDisponibles, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(scrlSeleccionados))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancelar)
                .addGap(53, 53, 53))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(pnlContinentes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNombreHabitat)
                            .addComponent(lblVegetacion)
                            .addComponent(lblClima))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbVegetacion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbClima, 0, 148, Short.MAX_VALUE)
                            .addComponent(txtNombreHabitat))
                        .addGap(18, 18, 18)
                        .addComponent(btnVerificar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombreHabitat)
                    .addComponent(txtNombreHabitat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnVerificar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbVegetacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVegetacion))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbClima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblClima))
                .addGap(34, 34, 34)
                .addComponent(pnlContinentes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnCancelar))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.instancia = null;
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void clkBotonVerificarExistencia(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clkBotonVerificarExistencia
        try {
            // TODO add your handling code here:
            verificarExistenciaHabitat();
        } catch (DAOException ex) {
           muestraMsjError(ex.getMessage());
        }
    }//GEN-LAST:event_clkBotonVerificarExistencia

    private void clkBotonAgregarContinente(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clkBotonAgregarContinente
        agregarContiente();
    }//GEN-LAST:event_clkBotonAgregarContinente

    private void clkBotonEliminarContinente(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clkBotonEliminarContinente
        eliminarContiente();
    }//GEN-LAST:event_clkBotonEliminarContinente

    private void clkBotonGuardarHabitat(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clkBotonGuardarHabitat
        // TODO add your handling code here:
        guardarHabitat();
    }//GEN-LAST:event_clkBotonGuardarHabitat

    
    public void guardarHabitat(){
        try{
            habitat.setClima((Clima) cmbClima.getSelectedItem());
            habitat.setVegetacion((Vegetacion) cmbVegetacion.getSelectedItem());
            habitat.setNombre(txtNombreHabitat.getText());
            habitat.verificaCampos();
            iNegocios.guadarHabitat(habitat);
            JOptionPane.showMessageDialog(this, habitat,"Creado exitosamente", JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception e){
            muestraMsjError(e.getMessage());
        }
    }
    
    
    
    
    public void verificarExistenciaHabitat() throws DAOException {
        String nombre = this.txtNombreHabitat.getText();

        for (Habitat habitatNuevo : iNegocios.buscaHabitat()) {
            if (habitatNuevo.getNombre().equals(nombre)) {
                    muestraMsjExistencia();
                    System.out.println(habitatNuevo);
                    llenarCamposInfo(habitatNuevo);
                    return;
            }
        }

        activarCampos();
    }

    public void muestraMsjExistencia() {
        JOptionPane.showMessageDialog(this, "Este habitat ya existe", "Advertencia", JOptionPane.WARNING_MESSAGE);
    }
    public void muestraMsjError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }

    public void llenarCamposInfo(Habitat habitatEncontrado) {
        mdlSeleccionados = new DefaultListModel();
        this.txtNombreHabitat.setText(habitatEncontrado.getNombre());
        //cmbClima.setSelectedItem(habitatEncontrado.getClima());
        for (int i = 0; i < cmbClima.getItemCount(); i++) {
            if(cmbClima.getItemAt(i) == habitatEncontrado.getClima()){
                cmbClima.setSelectedIndex(i);
            }
        }
        //cmbVegetacion.setSelectedItem(habitatEncontrado.getVegetacion());
        for (int i = 0; i < cmbVegetacion.getItemCount(); i++) {
            if(cmbVegetacion.getItemAt(i).getNombre().equals(habitatEncontrado.getVegetacion().getNombre())){
                cmbVegetacion.setSelectedIndex(i);
            }
        }
        habitatEncontrado.getContinentes().forEach(continente -> {
            mdlSeleccionados.addElement(continente);
            listContinentesSeleccionados.setModel(mdlSeleccionados);
        });
        
    }
    public void agregarContiente(){
        
        int fila = listContinentesDisponibles.getSelectedIndex();
        
        mdlSeleccionados.addElement(listContinentesDisponibles.getSelectedValue());
        habitat.agregarContinente(listContinentesDisponibles.getSelectedValue());
        mdlDisponibles = (DefaultListModel) listContinentesDisponibles.getModel();
        mdlDisponibles.remove(fila);
        listContinentesDisponibles.setModel(mdlDisponibles);
        listContinentesSeleccionados.setModel(mdlSeleccionados);
        
    }
    public void eliminarContiente(){
        int fila = listContinentesSeleccionados.getSelectedIndex();
        
        mdlDisponibles.addElement(listContinentesSeleccionados.getSelectedValue());
        habitat.eliminarContinente(listContinentesDisponibles.getSelectedValue());
        mdlSeleccionados = (DefaultListModel) listContinentesSeleccionados.getModel();
        mdlSeleccionados.remove(fila);
        listContinentesSeleccionados.setModel(mdlSeleccionados);
        listContinentesDisponibles.setModel(mdlDisponibles);
        
    }
    
    public void activarCampos(){
        this.cmbClima.setEnabled(true);
        this.cmbVegetacion.setEnabled(true);
        this.listContinentesDisponibles.setEnabled(true);
        this.listContinentesSeleccionados.setEnabled(true);
        this.btnGuardar.setEnabled(true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnVerificar;
    private javax.swing.JComboBox<Clima> cmbClima;
    private javax.swing.JComboBox<Vegetacion> cmbVegetacion;
    private javax.swing.JLabel lblClima;
    private javax.swing.JLabel lblNombreHabitat;
    private javax.swing.JLabel lblVegetacion;
    private javax.swing.JList<Continente> listContinentesDisponibles;
    private javax.swing.JList<Continente> listContinentesSeleccionados;
    private javax.swing.JPanel pnlContinentes;
    private javax.swing.JScrollPane scrlDisponibles;
    private javax.swing.JScrollPane scrlSeleccionados;
    private javax.swing.JTextField txtNombreHabitat;
    // End of variables declaration//GEN-END:variables
}
